generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id               String        @id @default(uuid()) @db.VarChar(255)
  name             String        @db.VarChar(255)
  email            String        @unique @db.VarChar(255)
  number_phone     String?       @unique @db.Char(14)
  password         String?       @db.VarChar(255)
  avatar           String?       @db.VarChar(255)
  refresh_token_id String?       @db.VarChar(255)
  google_id        String?       @unique
  role_id          Int
  is_delete        Boolean       @default(false) @db.TinyInt
  refresh_token    RefreshToken? @relation(fields: [refresh_token_id], references: [id])
  role             Roles         @relation(fields: [role_id], references: [id])
  district         String?       @db.VarChar(255)
  Token            Token[]
  Reports          Reports[]
  Comments         Comments[]

  @@map("users")
}

model Token {
  id         String   @id @default(uuid()) @db.VarChar(255)
  token      String   @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(0)
  expired_at DateTime @db.Timestamp(0)
  email      String   @db.VarChar(255)
  user_id    String   @db.VarChar(255)
  user       Users    @relation(fields: [user_id], references: [id])

  @@map("token")
}

model RefreshToken {
  id            String   @id @default(uuid()) @db.VarChar(255)
  refresh_token String   @db.VarChar(255)
  created_at    DateTime @default(now()) @db.Timestamp(0)
  expired_at    DateTime @db.Timestamp(0)
  Users         Users[]

  @@map("refresh_token")
}

model ValidationStatus {
  id      Int       @id @default(autoincrement())
  status  String    @db.VarChar(100)
  Reports Reports[]

  @@map("validation_status")
}

model DamageLevel {
  id      Int       @id @default(autoincrement())
  level   String    @db.VarChar(100)
  Reports Reports[]

  @@map("damage_level")
}

model Reports {
  id                   String           @id @default(uuid()) @db.VarChar(100)
  title                String           @db.VarChar(100)
  desc                 String           @db.TinyText
  lat                  Decimal          @db.Decimal(9, 6)
  long                 Decimal          @db.Decimal(9, 6)
  location             String           @db.TinyText
  is_district_validate Boolean          @db.TinyInt
  is_pupr_validate     Boolean          @db.TinyInt
  video_url            String?          @db.VarChar(255)
  user_id              String           @db.VarChar(255)
  created_at           DateTime         @default(now()) @db.Timestamp(0)
  updated_at           DateTime         @default(now()) @db.Timestamp(0)
  is_delete            Boolean          @default(false) @db.TinyInt
  notes                String?          @db.TinyText
  district             String?          @db.VarChar(255)
  validation_stat_id   Int
  damage_level_id      Int
  user                 Users            @relation(fields: [user_id], references: [id])
  validation_status    ValidationStatus @relation(fields: [validation_stat_id], references: [id])
  damage_level         DamageLevel      @relation(fields: [damage_level_id], references: [id])
  Comments             Comments[]
  ReportImages         ReportImages[]

  @@map("reports")
}

model Comments {
  id         String   @id @default(uuid()) @db.VarChar(255)
  comment    String   @db.TinyText
  created_at DateTime @default(now()) @db.Timestamp(0)
  user_id    String   @db.VarChar(255)
  report_id  String   @db.VarChar(255)
  user       Users    @relation(fields: [user_id], references: [id])
  report     Reports  @relation(fields: [report_id], references: [id])

  @@map("comments")
}

model ReportImages {
  id        Int     @id @default(autoincrement())
  image_url String  @db.VarChar(255)
  report_id String  @db.VarChar(255)
  report    Reports @relation(fields: [report_id], references: [id])

  @@map("report_images")
}

model Roles {
  id    Int     @id @default(autoincrement())
  role  String  @db.VarChar(100)
  Users Users[]

  @@map("roles")
}
